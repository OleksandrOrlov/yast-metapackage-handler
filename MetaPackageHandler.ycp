//Based on /usr/share/doc/packages/yast2-core/libyui/examples/Wizard3.ycp
{
	textdomain "MetaPackageHandler";


    import "PackageCallbacks";
	import "GetInstArgs";
	import "Popup";
	import "SourceManager";
	import "Label";
	import "Mode";
	import "String";
	import "Internet";
	import "Wizard";
    import "Stage";
	import "Sequencer";
	import "Progress";
    import "ProductControl";
	
	import "MetaPackageParser";

	include "packager/inst_source_dialogs.ycp";

	list<map<string,string> > unMunge(map <string, any> xml, string key)
	{
		list<map<string,list<string> > > input = ((map)((list)xml[key + "s"]:[])[0]:$[])[key]:[];
		list<map<string,string> > output = [];
		foreach (map<string,list<string> > element, input,
			{
				map<string, string> converted = $[];
				foreach (string key, list<string> value, element,
					{
					
						if (is(value,list))
						{
							if (is(value[0]:"",string))
							{
								converted[key] = value[0]:"";
							} else
							{
								converted[key] = "";
							}
						} else if (is(value,string))
						{
							converted[key] = (string)((any)value);
						} else
						{
							converted[key] = "";
						}
					}
				);
				output = add(output,converted);
			}
		);
		return output;
    }

    integer width = 76;
    integer height = 15;

	string metaPackageUrl = "http://benjiweber.co.uk/repos.ymp";

	//Let's not be having people installing the rm -rf / package.
	string validPackageChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._-";
	string invalidURLChars = " |#$^*()'";

	string SU_CMD = "xdg-su -c";

	//strings used
	string packagedescription = _("Select the software components you wish to install:");
	string description = _("Select the software repositories you wish to subscribe to:");
	string catalogueDescHeading = _("Repository Description:");
	string packageDescHeading = _("Package Description:");
	string additionalSoftwareCataloguesHeading = _("Additional Software Repositories");
	string softwareToBeInstalledHeading = _("Software to be installed");
	string pleaseBePatient = _("Please be patient while this software is installed.");
	string softwareInstallation = _("Software installation");
	string help1 = _("This wizard will install software onto your computer");
	string help2 = _("See http://en.opensuse.org/MetaPackages for more information");
	string warning = _("Warning:");
	string warning1 = _("If you choose to continue the following changes will be made to your system");
	string theFollowingCatalogues = _("The following repositories will be subscribed to:");
	string theFollowingPackages = _("The following software packages will be installed:");
	string failed = _("Unfortunately the installation has failed, see the log file at /var/log/YaST2/y2log for more information");
	string successful = _("Installation was successful");
	string installationStatus = _("Installation status:");
	string remainSubscribed = _("Remain subscribed to these repositories after installation");
	string youWillRemainSubscribed = _("You will remain subscribed to these repositories after installation.");
	string youWillNotRemainSubscribed = _("These repositories will only be added during installation, you will not remain subscribed.");
	string nb = _("Note:");
	list args = WFM::Args();
	if (size(args) > 0)
		metaPackageUrl = args[0]:metaPackageUrl;

	if (substring(metaPackageUrl,0,1) == "/")
		metaPackageUrl = "file://" + metaPackageUrl;

	map <string, any> xml = MetaPackageParser::GetMetaPackage(metaPackageUrl);
	list<map<string,string> > packages = unMunge(xml,"package");
	list<map<string,string> > repos = unMunge(xml,"repo");

	list<term> items = [];
	list<term> packageitems = [];
	
	foreach (map value, repos, 
	{
		// display the enabled sources at the beginning of the list
	    if (value["recommended"]:"false" == "true")
	    {
			items = add(items, `item(`id(deletechars(toascii(value["url"]:""),invalidURLChars)), deletechars(toascii(value["url"]:""),invalidURLChars), true));
	    }
	});
	
	foreach (map value, repos, 
	{
	    if (value["recommended"]:"false" == "false")
	    {
			items =  add(items,`item(`id(deletechars(toascii(value["url"]:""),invalidURLChars)),deletechars(toascii(value["url"]:""),invalidURLChars),false));
	    }
	});

	foreach (map value, packages, 
	{
		// display the enabled sources at the beginning of the list
	    if (value["recommended"]:"false" == "true")
	    {
			packageitems = add(packageitems, `item(`id(filterchars(value["name"]:"",validPackageChars)), filterchars(value["name"]:"",validPackageChars), true));
	    }
	});

	foreach (map value, packages, 
	{
	    if (value["recommended"]:"false" == "false")
	    {
			packageitems =  add(packageitems,`item(`id(filterchars(value["name"]:"",validPackageChars)), filterchars(value["name"]:"",validPackageChars),false));
	    }
	});

	map<string,string> firstPackage = packages[0]:$[];
	string tempDescription = firstPackage["description"]:"";
	boolean temporary = false;

	term catalogues = `VBox
	(
		`VWeight(2,
					`Heading(additionalSoftwareCataloguesHeading)
				),
		`VWeight(10,
					`MultiSelectionBox(`id(`multi),`opt(`notify), description, items)
				),
		`VWeight(1,
					`CheckBox(`id(`remain),remainSubscribed,!temporary)
				),
		`VWeight(5,
					`RichText(`id(`descrLabel),"<h2>" + catalogueDescHeading + "</h2>" + (repos[0]:$[])["description"]:" ")
				)	
	);	
	term packagesUI = `VBox
	(
		`VWeight(2,
					`Heading(softwareToBeInstalledHeading)
				),
		`VWeight(10,
					`MultiSelectionBox(`id(`packagesselect),`opt(`notify), packagedescription, packageitems)
				),
		`VWeight(5,
					`RichText(`id(`packageDescrLabel),"<h2>" + packageDescHeading + "</h2>" + tempDescription)
				)	
	
	);

	term nothing = `VBox
	(
		`Heading("There is nothing to do")
	);


/*
    term cataloguesold = `HBox(
	`HSpacing(1),
	`VBox(
	    `VSpacing(0.2),
	    `Heading(additionalSoftwareCataloguesHeading),
	    `VSpacing(0.2),
	    `VBox(
		`HSpacing(width),
		`HBox(
		    `VSpacing(height),
		    // label
		    `MultiSelectionBox(`id(`multi),`opt(`notify), description, items)
		)
	    ),
		
		`CheckBox(`id(`remain),remainSubscribed,true),
	    `VSpacing(0.2),
		`HBox(
		    `VSpacing(height / 2),
			`RichText(`id(`descrLabel),"<h2>" + catalogueDescHeading + "</h2>" + (repos[0]:$[])["description"]:" ")
		),
	    `VSpacing(0.5)
	    ),
	`HSpacing(1)
    );
*/



/*
    term packagesUI = `HBox(
	`HSpacing(1),
	`VBox(
	    `VSpacing(0.2),

	    `Heading(softwareToBeInstalledHeading),
	    `VSpacing(0.2),
	    `VBox(
		`HSpacing(width),
		`HBox(
		    `VSpacing(height),
		    // label
		    `MultiSelectionBox(`id(`packagesselect),`opt(`notify), packagedescription, packageitems)
		)
	    ),

	    `VSpacing(0.2),
		`HBox(
		    `VSpacing(height / 2),
	    	`RichText(`id(`packageDescrLabel),"<h2>" + packageDescHeading + "</h2>" + tempDescription)
		),
	    `VSpacing(0.5)
	    ),
	`HSpacing(1)
    );
*/
    term confirm = `HBox(
	`VBox(

		`VWeight(5,
				`RichText(`id(`summary),""))

		)
    );

    term perform = `HBox(
	`HSpacing(1),
	`VBox(
	    `VSpacing(0.2),
	    `Heading(pleaseBePatient),
	    `VSpacing(0.2)
	    ),
	`HSpacing(1)
    );


    term result = `HBox(
	`HSpacing(1),
	`VBox(
		`VSpacing(0.1),
		`RichText(`id(`resultLabel),""),
	    `VSpacing(0.2)
	    ),
	`HSpacing(1)
    );


    list<map> installation_steps  = [];
	if ((size(repos) > 0) && (size(packages) > 0))
	{
		installation_steps =	
			[
				$[ "id": "catalogues",	"label": _("Repositories") ],
				$[ "id": "packagesUI",	"label": _("Packages")	],
				$[ "id": "confirm",		"label": _("Installation Settings")	],
				$[ "id": "perform",		"label": _("Perform Installation") ],
				$[ "id": "result",		"label": _("Results") ]
			];
	} else if ((size(repos) > 0) && (size(packages) == 0))
	{
		installation_steps =	
			[
				$[ "id": "catalogues",	"label": _("Repositories") ],
				$[ "id": "confirm",		"label": _("Installation Settings")	],
				$[ "id": "perform",		"label": _("Perform Installation") ],
				$[ "id": "result",		"label": _("Results") ]
			];
	} else if ((size(repos) == 0) && (size(packages) > 0))
	{
		installation_steps =	
			[
				$[ "id": "packagesUI",	"label": _("Packages")	],
				$[ "id": "confirm",		"label": _("Installation Settings")	],
				$[ "id": "perform",		"label": _("Perform Installation") ],
				$[ "id": "result",		"label": _("Results") ]
			];
	} else 
	{
		installation_steps = 
			[
				$[ "id": "nothing",	"label": _("Nothing to do") ],
			];
	}
	


	list<map> installation_widgets = 
	[
		$["id": "catalogues", "widget":catalogues],
		$["id": "packagesUI", "widget":packagesUI],
		$["id": "confirm", "widget":confirm],
		$["id": "perform", "widget":perform],
		$["id": "result", "widget":result],
		$["id": "nothing", "widget":nothing]
	];	

    define void show_step( integer no)
    ``{
			string current_id = (installation_steps[ no ]:nil)["id"]:"";
		
			if (current_id == "result")
			{
				Wizard::SetNextButton (`finish, Label::FinishButton());
			}

			UI::ReplaceWidget(`id(`contents),(installation_widgets[ no ]:$[])["widget"]:packagesUI);
	    
			UI::WizardCommand(`SetCurrentStep( current_id ) );
    };

	define boolean is_performing(integer no)
	``{
		string current_id = (installation_steps[ no ]:nil)["id"]:"";
		return (current_id == "perform");
	};

	define boolean is_confirming(integer no)
	``{
		string current_id = (installation_steps[ no ]:nil)["id"]:"";
		return (current_id == "confirm");
	};

    string help_text =
	"<h1>" + softwareInstallation + "</h1>"
	+ "<p>" + help1 + "</p>"
	+ "<p>" + help2 + "</p>";

    UI::OpenDialog(`opt(`defaultsize ),
		   `Wizard(`opt(`stepsEnabled),
			   `back,  "&Back",
			   `abort, "Ab&ort",
			   `next,  "&Next" ) );
    
    UI::WizardCommand(`SetDialogIcon( "/usr/share/YaST2/theme/SuSELinux/icons/22x22/apps/user_add.png" ) );
    UI::WizardCommand(`SetDialogHeading( "Software Installation" ) );
    UI::WizardCommand(`SetHelpText( help_text ) );

    UI::WizardCommand(`AddStepHeading( "Installation Steps" ) );
    
    foreach ( map step,installation_steps, ``{
	UI::WizardCommand(`AddStep( step["label"]:"", step["id"]:"" ) );
    });
    
    integer current_step = 0;
    show_step( 0 );

	list<string> selected_items = [];
	list<string> selected_packages = [];
	boolean done = false;

    while( !done )
    {	

		symbol button = nil;

		repeat
		{
			button = (symbol) Wizard::UserInput();

			if (button == `multi)
			{
				string selected = (string) UI::QueryWidget( `id(`multi), `CurrentItem );
				foreach (map value, repos, 
				{
					// display the enabled sources at the beginning of the list
					if (deletechars(toascii(value["url"]:""),invalidURLChars) == selected)
					{
						UI::ChangeWidget(`descrLabel, `Value,"<h2>" + catalogueDescHeading + "</h2>" + value["description"]:"" );
					}
				});

				selected_items = (list<string>) UI::QueryWidget(`id(`multi), `SelectedItems);
			}

			if (button == `packagesselect)
			{
				string selected = (string) UI::QueryWidget( `id(`packagesselect), `CurrentItem );
				foreach (map value, packages, 
				{
					// display the enabled sources at the beginning of the list
					if (filterchars(value["name"]:"",validPackageChars) == selected)
					{
						UI::ChangeWidget(`packageDescrLabel, `Value,"<h2>" + packageDescHeading + "</h2>" + value["description"]:"" );
					}
				});
				selected_packages = (list<string>) UI::QueryWidget(`id(`packagesselect), `SelectedItems);
			}
	
		} until ((button != `multi) && (button != `packagesselect));	

		if ( button == `abort )
			break;
	
		if ( button == `next || button == `back )
		{

			if (current_step == 0)
			{
				temporary = !(boolean)UI::QueryWidget(`id(`remain), `Value);
			}

			if ( button == `next && current_step+1 < size( installation_steps ) )
			{
			current_step = current_step+1;
	
			if ( current_step > 2 )
				UI::WizardCommand(`HideReleaseNotesButton() );
			}
	
			if ( button == `back && current_step > 0 )
			current_step = current_step-1;
	
			show_step( current_step );
			if (is_confirming(current_step))
			{
				string repoStr = "";
				string packageStr = "";
				foreach (string repo, selected_items, 
					{
						repoStr = repoStr + "<li>" + repo + "</li>";
					}
				);

				UI::ChangeWidget(`catalogueSummaryLabel, `Value, repoStr );
				
				foreach (string package, selected_packages, 
					{
						packageStr = packageStr + "<li>" + package + "</li>";
					}
				);

				string tempOrPerm = youWillRemainSubscribed;
				if ( temporary)
				{
					tempOrPerm = youWillNotRemainSubscribed;
				} else
				{
					tempOrPerm = youWillRemainSubscribed;
				}
				UI::ChangeWidget(`summary, `Value,
					"<h1>" + warning + "</h1>" +
					"<font color='red'>" + warning1 + "</font>" + 
					"<h2>" + theFollowingCatalogues +"</h2>" +
					repoStr +
					"<h3>" + nb + "</h3>" +
					"<li>" + tempOrPerm + "</li>" +
					"<h2>" + theFollowingPackages + "</h2>" +
					packageStr
				);
			}

			if (is_performing(current_step))
			{
				Wizard::DisableBackButton();
				Wizard::DisableNextButton();
				string repoStr = "";
				string packageStr = "";
				foreach (string repo, selected_items, 
					{
						repoStr = repoStr + "," + repo;
					}
				);
				repoStr = substring(repoStr,1,size(repoStr) -1);
				repoStr = "repos:" + repoStr;

				foreach (string package, selected_packages, 
					{
						packageStr = packageStr + "," + package;
					}
				);
				packageStr = substring(packageStr,1,size(packageStr) -1);
				packageStr = "packages:" + packageStr;
				
				string temporaryStr = "true";
				if (!temporary)
				{
					temporaryStr = "false";
				}

				temporaryStr = "temporary:" + temporaryStr;
				y2milestone(temporaryStr);

				string status = failed; 
				integer ret = (integer)SCR::Execute (.target.bash, SU_CMD + " '/sbin/yast2 MetaPackageWorker " + repoStr + " " + packageStr + " " + temporaryStr + "'");
				if (ret == 0)
				{
					status = successful;
				}
				current_step = current_step + 1;
				Wizard::EnableNextButton();
				show_step( current_step );
				
				UI::ChangeWidget(`resultLabel, `Value, 
				"<h1>" + installationStatus + "</h1>" +
				status
				);
			}
		}

		if ( button == `finish )
		{
			done = true;
		}
    }

    UI::CloseDialog();

}
